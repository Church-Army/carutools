[{"path":"https://church-army.github.io/carutools/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 Dave Lovell Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://church-army.github.io/carutools/articles/colours-and-themes.html","id":"colours","dir":"Articles","previous_headings":"","what":"Colours","title":"Colours and themes","text":"Church Army colours, wrapped prefixed functions.","code":"#' ca_purple() colours <- c(   black      = ca_black(),   white      = ca_white(),   orange     = ca_orange(),   gold       = ca_gold(),   green      = ca_green(),   maroon     = ca_maroon(),   cyan       = ca_cyan(),   purple     = ca_purple(),   light_teal = ca_light_teal(),   dark_teal  = ca_dark_teal(),   brown      = ca_brown() )  get_cols <- function(x) colours[x]  fix_col_name <- function(x){   stringr::str_replace(x, \"_\", \"-\") |>     stringr::str_replace(\"[:space:]\", \"-\") }  #' Get church army colours by name #' #' @param x A character vector. Values must all be in \\link[carutools]{ca_sample_cols} #' @returns A character vector #' @export ca_cols <- function(x){   x <- fix_col_name(x)   stopifnot(all(x %in% names(colours)))    out <- get_cols(x)    return(out) }"},{"path":[]},{"path":"https://church-army.github.io/carutools/articles/colours-and-themes.html","id":"themes","dir":"Articles","previous_headings":"Colours","what":"Themes","title":"Colours and themes","text":"Church Army default themes : ggplot2 flextable","code":""},{"path":"https://church-army.github.io/carutools/articles/helpers.html","id":"helper-functions","dir":"Articles","previous_headings":"","what":"Helper functions","title":"Helpers","text":"","code":"library(testthat)"},{"path":"https://church-army.github.io/carutools/articles/helpers.html","id":"range_labels","dir":"Articles","previous_headings":"Helper functions","what":"range_labels()","title":"Helpers","text":"","code":"#' range_labels(1:10, width = 3) #' range_labels(1:10, width = 3, include = \"lower\", start = 0, explicit_zero = TRUE)"},{"path":"https://church-army.github.io/carutools/articles/helpers.html","id":"relabeller","dir":"Articles","previous_headings":"Helper functions","what":"relabeller()","title":"Helpers","text":"Creates function wraps around dplry::case_match() order swap specified elements character vector. Designed passed labels argument ggplots scale_*_discrete().","code":"#' fruits <- c(\"apple\", \"pear\", \"pear\", \"banana\") #' #' fruit_relabel <- relabeller(\"pear\" ~ \"orange\", \"banana\" ~ \"plum\") #' fruit_relabel(fruits) #' #' ## Normal use case #' \\dontrun{ #' ggplot(palmerpenguins::penguins, aes(x = sex, y = flipper_length_mm)) + #'   geom_point(alpha = 0.5) + #'   scale_x_discrete(labels = relabeller(\"male\" ~ \"BOY\\nPENGUIN\", \"female\" ~ \"GIRL\\nPENGUIN\")) #' }"},{"path":"https://church-army.github.io/carutools/articles/helpers.html","id":"tally_delimited_string","dir":"Articles","previous_headings":"Helper functions","what":"tally_delimited_string","title":"Helpers","text":"","code":"#' df <- data.frame(name = c(\"anna\", \"betty\"), #'               fruits = c(\"apple, banana\", \"pear, banana, banana\")) #' #' tally_delimited_string(df, fruits) #' #' tally_delimited_string(df, fruits, count = TRUE) #' #' tally_delimited_string(df, fruits, count = TRUE, names_repair = toupper) #' #' tally_delimited_string(df, fruits, keep = c(\"apple\", \"banana\")) #'"},{"path":"https://church-army.github.io/carutools/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Dave Lovell. Author, maintainer.","code":""},{"path":"https://church-army.github.io/carutools/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Lovell D (2024). carutools: Tools Church Army's Research Unit. R package version 0.0.0.9000, https://church-army.github.io/carutools/, https://github.com/Church-Army/carutools.","code":"@Manual{,   title = {carutools: Tools for and by Church Army's Research Unit},   author = {Dave Lovell},   year = {2024},   note = {R package version 0.0.0.9000, https://church-army.github.io/carutools/},   url = {https://github.com/Church-Army/carutools}, }"},{"path":"https://church-army.github.io/carutools/index.html","id":"carutools","dir":"","previous_headings":"","what":"Tools for and by Church Army's Research Unit","title":"Tools for and by Church Army's Research Unit","text":"Carutools collection tools developed used Church Army’s Research Unit. tools fall two main categories: Church Army colours themes Helper functions speed resarch workflows","code":""},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":"https://church-army.github.io/carutools/reference/ca_col.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a single church army colour by name — ca_col","title":"Get a single church army colour by name — ca_col","text":"wrapper around ca_cols accepts one name returns one colour","code":""},{"path":"https://church-army.github.io/carutools/reference/ca_col.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a single church army colour by name — ca_col","text":"","code":"ca_col(x)"},{"path":"https://church-army.github.io/carutools/reference/ca_col.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a single church army colour by name — ca_col","text":"x character. Value must one ca_sample_cols","code":""},{"path":"https://church-army.github.io/carutools/reference/ca_cols.html","id":null,"dir":"Reference","previous_headings":"","what":"Church Army Colours — ca_black","title":"Church Army Colours — ca_black","text":"functions return hexadecimal code colour Church Army's brand","code":""},{"path":"https://church-army.github.io/carutools/reference/ca_cols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Church Army Colours — ca_black","text":"","code":"ca_black()  ca_white()  ca_orange()  ca_gold()  ca_green()  ca_maroon()  ca_cyan()  ca_purple()  ca_light_teal()  ca_dark_teal()  ca_brown()"},{"path":"https://church-army.github.io/carutools/reference/ca_cols.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Church Army Colours — ca_black","text":"single character vector length one.","code":""},{"path":"https://church-army.github.io/carutools/reference/ca_cols.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Church Army Colours — ca_black","text":"functions wrappers around character vectors length one. take arguments always return string.","code":""},{"path":"https://church-army.github.io/carutools/reference/ca_cols.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Church Army Colours — ca_black","text":"","code":"ca_purple() #> [1] \"#523178\""},{"path":"https://church-army.github.io/carutools/reference/ca_pal.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a church army palette by name — ca_pal","title":"Get a church army palette by name — ca_pal","text":"function returns Church Army palette specified user","code":""},{"path":"https://church-army.github.io/carutools/reference/ca_pal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a church army palette by name — ca_pal","text":"","code":"ca_pal(which_pal = NULL)"},{"path":"https://church-army.github.io/carutools/reference/ca_pal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a church army palette by name — ca_pal","text":"which_pal character, must one ca_sample_pals.","code":""},{"path":"https://church-army.github.io/carutools/reference/ca_pal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a church army palette by name — ca_pal","text":"character vector length 5","code":""},{"path":"https://church-army.github.io/carutools/reference/ca_pal.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get a church army palette by name — ca_pal","text":"Depending names get_pal() passed which_pal, hexcodes one Church Army's colour palettes returned which_pal must exactly match one get_pal(), otherwise error thrown.","code":""},{"path":"https://church-army.github.io/carutools/reference/ca_pals.html","id":null,"dir":"Reference","previous_headings":"","what":"Church Army Colour Pallets — ca_pal_orange","title":"Church Army Colour Pallets — ca_pal_orange","text":"functions return colour pallet Church Army's brand","code":""},{"path":"https://church-army.github.io/carutools/reference/ca_pals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Church Army Colour Pallets — ca_pal_orange","text":"","code":"ca_pal_orange()  ca_pal_gold()  ca_pal_light_teal()  ca_pal_cyan()  ca_pal_dark_teal()  ca_pal_maroon()  ca_pal_purple()  ca_pal_brown()  ca_pal_green()  ca_pal_mix()"},{"path":"https://church-army.github.io/carutools/reference/ca_pals.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Church Army Colour Pallets — ca_pal_orange","text":"single character vector length five.","code":""},{"path":"https://church-army.github.io/carutools/reference/ca_pals.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Church Army Colour Pallets — ca_pal_orange","text":"functions wrappers around character vectors length five. take arguments always return character vector.","code":""},{"path":"https://church-army.github.io/carutools/reference/ca_sample_pals.html","id":null,"dir":"Reference","previous_headings":"","what":"See all Church Army palette and colour names — ca_sample_pals","title":"See all Church Army palette and colour names — ca_sample_pals","text":"character vector colour pallette names accepted carutools functions. instance, ca_pal accept name ca_sample_pals().","code":""},{"path":"https://church-army.github.io/carutools/reference/ca_sample_pals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"See all Church Army palette and colour names — ca_sample_pals","text":"","code":"ca_sample_pals()  ca_sample_cols()"},{"path":"https://church-army.github.io/carutools/reference/ca_sample_pals.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"See all Church Army palette and colour names — ca_sample_pals","text":"character vector Church Army palette colour names","code":""},{"path":"https://church-army.github.io/carutools/reference/range_labels.html","id":null,"dir":"Reference","previous_headings":"","what":"Range labels — range_labels","title":"Range labels — range_labels","text":"Create 'range labels' grouping tabulating continuous variable","code":""},{"path":"https://church-army.github.io/carutools/reference/range_labels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Range labels — range_labels","text":"","code":"range_labels(   x,   width,   start = NA,   sep = \" — \",   explicit_zero = TRUE,   suffix = \"\",   include = c(\"upper\", \"lower\", \"integer\"),   ordered = TRUE )"},{"path":"https://church-army.github.io/carutools/reference/range_labels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Range labels — range_labels","text":"x numeric vector width Desidered label width - numeric start number start lowest range label sep character used separate values within label explicit_zero Logical; zeroes label ? default. suffix Optional suffix append label (e.g. \"%\") include side range included. One 'upper', 'lower' 'integer' - latter special case deals exclusively integer ranges otherwise crashes. ordered Logical; output ordered factor?","code":""},{"path":"https://church-army.github.io/carutools/reference/range_labels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Range labels — range_labels","text":"character vector labels","code":""},{"path":"https://church-army.github.io/carutools/reference/range_labels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Range labels — range_labels","text":"","code":"range_labels(1:10, width = 3) #>  [1] 1 — <4   1 — <4   1 — <4   4 — <7   4 — <7   4 — <7   7 — <10  7 — <10  #>  [9] 7 — <10  10 — <13 #> Levels: 1 — <4 < 4 — <7 < 7 — <10 < 10 — <13 range_labels(1:10, width = 3, include = \"lower\", start = 0, explicit_zero = TRUE) #>  [1] >0 — 3  >0 — 3  >0 — 3  >3 — 6  >3 — 6  >3 — 6  >6 — 9  >6 — 9  >6 — 9  #> [10] >9 — 12 #> Levels: >-3 — 0 < >0 — 3 < >3 — 6 < >6 — 9 < >9 — 12"},{"path":"https://church-army.github.io/carutools/reference/relabeller.html","id":null,"dir":"Reference","previous_headings":"","what":"Relabeller — relabeller","title":"Relabeller — relabeller","text":"function factory constructs case_match function. Useful labels argument ggplot's scale_*_* functions.","code":""},{"path":"https://church-army.github.io/carutools/reference/relabeller.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Relabeller — relabeller","text":"","code":"relabeller(...)"},{"path":"https://church-army.github.io/carutools/reference/relabeller.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Relabeller — relabeller","text":"relabelling function","code":""},{"path":"https://church-army.github.io/carutools/reference/relabeller.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Relabeller — relabeller","text":"","code":"fruits <- c(\"apple\", \"pear\", \"pear\", \"banana\")  fruit_relabel <- relabeller(\"pear\" ~ \"orange\", \"banana\" ~ \"plum\") fruit_relabel(fruits) #> [1] \"apple\"  \"orange\" \"orange\" \"plum\"    ## Normal use case if (FALSE) { # \\dontrun{ ggplot(palmerpenguins::penguins, aes(x = sex, y = flipper_length_mm)) +   geom_point(alpha = 0.5) +   scale_x_discrete(labels = relabeller(\"male\" ~ \"BOY\\nPENGUIN\", \"female\" ~ \"GIRL\\nPENGUIN\")) } # }"},{"path":"https://church-army.github.io/carutools/reference/tally_delimited_string.html","id":null,"dir":"Reference","previous_headings":"","what":"Tally delimited string — tally_delimited_string","title":"Tally delimited string — tally_delimited_string","text":"Expand delimited string column columns tally instance every observed delimited value.","code":""},{"path":"https://church-army.github.io/carutools/reference/tally_delimited_string.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tally delimited string — tally_delimited_string","text":"","code":"tally_delimited_string(   x,   col,   delim = \",\",   count = FALSE,   names_repair = TRUE,   squish = TRUE,   names_prefix = NULL,   ignore = c(NA, \"\"),   keep = NULL,   other_suffix = \"other\",   other_tally_suffix = \"n_other\" )"},{"path":"https://church-army.github.io/carutools/reference/tally_delimited_string.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tally delimited string — tally_delimited_string","text":"x data-frame, tibble similar col character column tally delim delimiter separates elements string column, passed separate_longer_delim. fixed string default, use regex split ways. count TRUE/FALSE. items strings counted just marked present/missing? options respectively result new columns integer logical type. names_repair logical indicating whether repair new column names make_clean_names, alternative function name repair. Names repaired prior prefixing. squish delimited elements 'squished' str_squish? names_prefix Prefix names new columns. NULL (default), name col used. ignore Values within string column ignore. defaults result expected behaviour. keep character vector delineated items tally. Ignored NULL (default).  Values outside concatenated single string reported separate column. other_suffix prefix name column containing concatenated strings values keep keep NULL. argument set NA, column dropped. other_tally_suffix prefix name column containing count values keep keep NULL. argument set NA, column dropped","code":""},{"path":"https://church-army.github.io/carutools/reference/tally_delimited_string.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tally delimited string — tally_delimited_string","text":"data-frame-like object type x","code":""},{"path":"https://church-army.github.io/carutools/reference/tally_delimited_string.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tally delimited string — tally_delimited_string","text":"","code":"df <- data.frame(name = c(\"anna\", \"betty\"),               fruits = c(\"apple, banana\", \"pear, banana, banana\"))  tally_delimited_string(df, fruits) #>    name fruits_apple fruits_banana fruits_pear #> 1  anna         TRUE          TRUE       FALSE #> 2 betty        FALSE          TRUE        TRUE  tally_delimited_string(df, fruits, count = TRUE) #>    name fruits_apple fruits_banana fruits_pear #> 1  anna            1             1           0 #> 2 betty            0             2           1  tally_delimited_string(df, fruits, count = TRUE, names_repair = toupper) #>    name fruits_APPLE fruits_BANANA fruits_PEAR #> 1  anna            1             1           0 #> 2 betty            0             2           1  tally_delimited_string(df, fruits, keep = c(\"apple\", \"banana\")) #>    name fruits_apple fruits_banana fruits_other fruits_n_other #> 1  anna         TRUE          TRUE         <NA>              0 #> 2 betty        FALSE          TRUE         pear              1"},{"path":"https://church-army.github.io/carutools/reference/theme_ca.html","id":null,"dir":"Reference","previous_headings":"","what":"Church Army theme for ggplot2 visualisations — theme_ca","title":"Church Army theme for ggplot2 visualisations — theme_ca","text":"Church Army theme ggplot2 visualisations","code":""},{"path":"https://church-army.github.io/carutools/reference/theme_ca.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Church Army theme for ggplot2 visualisations — theme_ca","text":"","code":"theme_ca(colour = \"cyan\", ...)"},{"path":"https://church-army.github.io/carutools/reference/theme_ca.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Church Army theme for ggplot2 visualisations — theme_ca","text":"colour string, one ca_pal() ... Additional arguments passed ggplot2::theme()","code":""},{"path":"https://church-army.github.io/carutools/reference/theme_ca.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Church Army theme for ggplot2 visualisations — theme_ca","text":"ggplot2 theme object","code":""},{"path":"https://church-army.github.io/carutools/reference/theme_caru_flex.html","id":null,"dir":"Reference","previous_headings":"","what":"Church Army theme for flextable — theme_caru_flex","title":"Church Army theme for flextable — theme_caru_flex","text":"Church Army theme flextable","code":""},{"path":"https://church-army.github.io/carutools/reference/theme_caru_flex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Church Army theme for flextable — theme_caru_flex","text":"","code":"theme_caru_flex(x, color = ca_orange())"},{"path":"https://church-army.github.io/carutools/news/index.html","id":"carutools-development-version","dir":"Changelog","previous_headings":"","what":"carutools (development version)","title":"carutools (development version)","text":"Initial CRAN submission.","code":""}]
