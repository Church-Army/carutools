---
title: "Colours & themes"
author: "Dave Lovell"
format: html
editor: source
---

## Individual Church army colours

All the Church Army colours, wrapped in prefixed functions.

```{r function-ca-colours}
#' Church Army Colours
#'
#' These functions each return the hexadecimal code of a colour in Church Army's brand
#'
#' These functions are wrappers around character vectors of length one. They take no arguments and always return the same string.
#'
#' @returns
#' A single character vector of length one.
#' @export
#' @rdname ca_col
ca_black <- function() "#000000"
#' @rdname ca_col
#' @export
ca_white <- function() "#FFFFFF"
#' @rdname ca_col
#' @export
ca_orange <- function() "#E84619"
#' @rdname ca_col
#' @export
ca_gold   <- function() "#FBC900"
#' @rdname ca_col
#' @export
ca_green  <- function() "#509E2F"
#' @rdname ca_col
#' @export
ca_maroon <- function() "#910048"
#' @rdname ca_col
#' @export
ca_cyan   <- function() "#0092BC"
#' @rdname ca_col
#' @export
ca_purple <- function() "#523178"
#' @rdname ca_col
#' @export
ca_light_teal <- function() "#6C8B93"
#' @rdname ca_col
#' @export
ca_dark_teal  <- function() "#006272"
#' @rdname ca_col
#' @export
ca_brown      <- function() "#6F2C3F"
```

```{r examples-ca-colours}
ca_black()
```

## Church Army colours by name

```{r function-ca-colours-by-name}
#' Get church army colours by name
#'
#' @param ... Any number of characters vectors. All values must all be in \link[carutools]{ca_sample_cols}
#' @returns A character vector
#' @export
ca_colours <- function(...){
  
  x <- c(...)
  
  stopifnot(all(x %in% names(colours())))

  colours()[x]

}

#' Get single church army colour
#' 
#' @param x A string - must be one of \link[carutools]{ca_sample_cols}
#' @returns A single colour hexcode
#' @export
ca_colour <- function(x){
  stopifnot(is.character(x), length(x) == 1)

  ca_colours(x)
}

#' Vector of named Church Army colours
colours <- function(){
  c(
    black      = ca_black(),
    white      = ca_white(),
    orange     = ca_orange(),
    gold       = ca_gold(),
    green      = ca_green(),
    maroon     = ca_maroon(),
    cyan       = ca_cyan(),
    purple     = ca_purple(),
    
    lightteal    = ca_light_teal(),
    `light-teal` = ca_light_teal(),
    light_teal   = ca_light_teal(),
    
    darkteal    = ca_dark_teal(),
    `dark-teal` = ca_dark_teal(),
    dark_teal   = ca_dark_teal(),
    
    brown      = ca_brown())}
```

```{r examples-ca-colours-by-name}
ca_colours("cyan", "green", "purple")
ca_colour("darkteal")
## colour names are forgiving:
ca_colour("dark-teal")
```
## Palettes

Simple palettes based on Church Army colours that 'fade to white'.

```{r function-paletes}
# Palettes proper -------------------------------------------------------------
palettes <- list(
  orange      <- c("#E84619", "#ED6B47", "#F19074", "#F6B6A4", "#FADAD1"),
  gold       <- c("#FBC900", "#FCD446", "#FCDF74", "#FDE9A1", "#FEF4D0"),
  lightteal  <- c("#6C8B93", "#8AA2A9", "#A6B9BF", "#C4D1D3", "#E2E9E9"),
  light_teal  <- c("#6C8B93", "#8AA2A9", "#A6B9BF", "#C4D1D3", "#E2E9E9"),
  `light-teal`  <- c("#6C8B93", "#8AA2A9", "#A6B9BF", "#C4D1D3", "#E2E9E9"),
  cyan        <- c("#0092BC", "#36AFDA", "#68C4E2", "#9AD6EB", "#CCE9F3"),
  darkteal   <- c("#006272", "#35818D", "#67A1AB", "#9AC0C8", "#CCDFE3"),
  dark_teal   <- c("#006272", "#35818D", "#67A1AB", "#9AC0C8", "#CCDFE3"),
  `dark-teal`   <- c("#006272", "#35818D", "#67A1AB", "#9AC0C8", "#CCDFE3"),
  maroon      <- c("#9A054A", "#AE396F", "#C26A93", "#D89CBB", "#EBCED8"),
  purple      <- c("#523178", "#765B94", "#9784AE", "#BBAEC9", "#DCD6E4"),
  brown       <- c("#652430", "#85515A", "#A37C83", "#C1A7AD", "#E1D4D7"),
  green       <- c("#2AB04A", "#5EB66D", "#84C491", "#ACD6B5", "#D5E9D9")
)
# Palette functions --------------------------------------------------------------

#' Church Army Colour Pallets
#'
#' These functions each return a colour pallet from Church Army's brand
#'
#' These functions are wrappers around character vectors of length five.
#' They take no arguments and always return the same character vector.
#'
#' @returns
#' A single character vector of length five (nine in the case of `ca_pal_mix()`), containing colour hexcodes.
#' @rdname ca_pals
#' @export
ca_pal_orange     <- function() palettes$orange

#' @rdname ca_pals
#' @export
ca_pal_gold       <- function() palettes$gold

#' @rdname ca_pals
#' @export
ca_pal_light_teal <- function() palettes$light_teal

#' @rdname ca_pals
#' @export
ca_pal_cyan       <- function() palettes$cyan

#' @rdname ca_pals
#' @export
ca_pal_dark_teal  <- function() palettes$dark_teal

#' @rdname ca_pals
#' @export
ca_pal_maroon     <- function() palettes$maroon

#' @rdname ca_pals
#' @export
ca_pal_purple     <- function() palettes$purple

#' @rdname ca_pals
#' @export
ca_pal_brown      <- function() palettes$brown

#' @rdname ca_pals
#' @export
ca_pal_green      <- function() palettes$green

#' @rdname ca_pals
#' @export
ca_pal_mix <- function(){
  out <- c(ca_gold(), ca_cyan(), ca_green(), ca_purple(),
           ca_light_teal(), ca_orange(), ca_brown(),
           ca_dark_teal(), ca_maroon())
  out
}

get_pal <- function(x) palettes[[x]]

## Get ca_pal_* by name

#' See all Church Army palette and colour names
#'
#' A character vector of colour or pallette names accepted by `carutools` functions. For instance,
#' \link[carutools]{ca_pal} will only accept a name from `ca_sample_pals()`.
#'
#' @returns A character vector of Church Army palette or colour names
#' @export
ca_sample_pals    <- function(){
  c("mix", "orange", "gold", "light-teal", "cyan", "dark-teal", "purple", "brown", "green")
}

#'@export
#'@rdname ca_sample_pals
ca_sample_cols <- function() return(names(colours))

#' Get a church army palette by name
#'
#' This function returns a Church Army palette specified by the user
#'
#' Depending on which of the names in `get_pal()` is passed to `which_pal`,
#' the hexcodes of one of Church Army's colour palettes is returned
#'
#' `which_pal` must exactly match one of `ca_sample_pals()`, otherwise an error is thrown.
#'
#' @returns
#' A character vector of length 5
#'
#' @param which_pal A character, which must be one of \link[carutools]{ca_sample_pals}.
#' @export
ca_pal <- function(which_pal = NULL){

  stopifnot(length(which_pal) == 1)

  if(is.null(which_pal) || !which_pal %in% ca_sample_pals()){
    rlang::abort("You must specify a pallet name. See ca_sample_pals() for all valid palettes")
  }
  get_pal(which_pal)
}
```

## Themes

Church Army default themes for:

* ggplot2
* flextable

```{r function-theme-ca}
#' Church Army theme for ggplot2 visualisations
#'
#' @param colour A string, one of [carutools::ca_sample_pals()]
#'
#' @param ... Additional arguments passed on to [ggplot2::theme()]
#'
#' @returns A ggplot2 theme object
#'
#' @export
theme_ca <- function(colour = "cyan", ...){

  colour <- ca_colour(colour)

  extrafont::loadfonts(device = "win", quiet = TRUE)

  theme <-
      ggplot2::theme_minimal() +
      theme(
        text       = ggplot2::element_text(family = "Trebuchet MS"),
        plot.title = ggplot2::element_text(colour = colour),
        axis.line  = ggplot2::element_line(colour = "black"),
        axis.ticks = ggplot2::element_line()
        )

  return(theme)
}
```

```{r function-theme-caru-flex}
#' Church Army theme for flextable
#'
#'@param x A flextable object
#'@param colour A hexcode corresponding to a colour
#'
#'@export
theme_caru_flex <- function(x, colour = ca_orange()){

  rlang::check_installed("flextable")

  flextable::theme_vanilla(x) |>
    flextable::color(color = colour, part = "header")
}
```
